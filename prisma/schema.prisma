// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String
  email             String         @unique
  password          String
  avatar            String         @default("https://api.dicebear.com/9.x/dylan/svg?skinColor=ffd6c0")
  role              UserRole
  apartments        Apartment[]
  messages_sent     Message[]      @relation("MessageSender")
  messages_received Message[]      @relation("MessageReceiver")
  complaints        Complaint[]
  votes             Vote[]
  reservations      Reservation[]
  forum_posts       ForumPost[]
  comments          Comment[]
  notifications     Notification[]
  condominiums      Condominium[]  @relation("CondominiumAdmin") // Síndico/Admin de condomínios
}

model Apartment {
  id            Int         @id @default(autoincrement())
  number        String
  building      String
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  condominiumId Int
}

model Condominium {
  id         Int         @id @default(autoincrement())
  name       String
  address    String
  admin      User        @relation("CondominiumAdmin", fields: [adminId], references: [id]) // Síndico/Admin do condomínio
  adminId    Int
  apartments Apartment[] // Apartamentos associados ao condomínio
}

model AreaCommon {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  reservations Reservation[]
}

model Reservation {
  id             Int        @id @default(autoincrement())
  area_common    AreaCommon @relation(fields: [area_common_id], references: [id])
  area_common_id Int
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime   @default(now())
}

model ForumPost {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id])
  postId    Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Complaint {
  id          Int             @id @default(autoincrement())
  description String
  status      ComplaintStatus
  createdAt   DateTime        @default(now())
  resolvedAt  DateTime?
  user        User            @relation(fields: [userId], references: [id])
  userId      Int
}

model Vote {
  id        Int      @id @default(autoincrement())
  topic     String
  option    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Notification {
  id        Int              @id @default(autoincrement())
  content   String
  type      NotificationType
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation(name: "MessageSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation(name: "MessageReceiver", fields: [receiverId], references: [id])
  receiverId Int
}

enum UserRole {
  RESIDENT
  MANAGER
  ADMIN
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum NotificationType {
  ANNOUNCEMENT
  REMINDER
  ALERT
}
